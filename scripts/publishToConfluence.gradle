buildscript {
    repositories {
        if (gradle.hasProperty('extraJcenterUrls')) {
            gradle.ext.extraJcenterUrls.each {
                mavenUrl ->
                    return maven { url mavenUrl }
            }
        }
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        //for the exportJiraIssues Task
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
        //for the renderToConfluence Task
        classpath 'org.apache.httpcomponents:httpmime:4.5.10'
        classpath 'org.jsoup:jsoup:1.12.1'
    }
}

//tag::publishToConfluence[]
task publishToConfluence(
        description: 'publishes the HTML rendered output to confluence',
        group: 'docToolchain'
) {
    doLast {
        logger.info("docToolchain> docDir: "+docDir)
        def configFile = new File(docDir, mainConfigFile)
        def config = new ConfigSlurper().parse(configFile.text)

        if(config.confluence.credentials.isEmpty()){
            logger.quiet("no credentials set in '${configFile.name}'")
            logger.quiet("trying 'confluenceUser' and 'confluencePassword' from gradle properties")

            if(project.hasProperty("confluenceUser") && project.hasProperty("confluencePassword")){
                config.confluence.credentials = "${confluenceUser}:${confluencePassword}".bytes.encodeBase64().toString()
            }else{
                logger.quiet("variables 'confluenceUser' and/or 'confluencePassword' are not set!")
                logger.quiet("please specify them through gradle.properties, the commandline or environment variables")
            }

        }

        binding.setProperty('config',config)
        binding.setProperty('docDir',docDir)
        binding.setProperty('configFile', configFile)
        binding.setProperty('jiraRoot', jiraRoot)
        evaluate(new File(projectDir, 'scripts/asciidoc2confluence.groovy'))
    }
}
//end::publishToConfluence[]
project.afterEvaluate {
    project.tasks.publishToConfluence.dependsOn generateHTML
}
